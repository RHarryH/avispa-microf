package com.avispa.microf.gui;

import com.avispa.microf.InputParameters;
import com.avispa.microf.invoice.file.IInvoiceFile;
import com.avispa.microf.invoice.file.ODFInvoiceFile;
import com.avispa.microf.util.FormatUtils;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import java.awt.*;
import java.awt.print.PrinterException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.Properties;

/**
 * @author Rafał Hiszpański
 */
public class MainPanel {
    private static final DateLabelFormatter DATE_LABEL_FORMATTER = new DateLabelFormatter();
    private static final Logger log = LoggerFactory.getLogger(MainPanel.class);

    private JSpinner serialNumber;
    private JDatePickerImpl invoiceDate;
    private JPanel panel;
    private JDatePickerImpl serviceDate;
    private JFormattedTextField value;
    private JLabel serialNumberLabel;
    private JLabel invoiceDateLabel;
    private JLabel serviceDateLabel;
    private JLabel valueLabel;
    private JButton generate;
    private JButton generateAndPrint;

    public MainPanel() {
        $$$setupUI$$$();
        generate.addActionListener(event -> processInvoice(false));
        generateAndPrint.addActionListener(e -> processInvoice(true));
    }

    private void processInvoice(boolean print) {
        try (IInvoiceFile invoiceFile = new ODFInvoiceFile(getInputs())) {
            invoiceFile.generate();
            invoiceFile.save();
            if (print) {
                invoiceFile.print();
            }
        } catch (FileNotFoundException e) {
            log.error("Cannot open template file", e);
        } catch (IOException e) {
            log.error("Exception during invoice generation", e);
        } catch (PrinterException e) {
            log.error("Exception while printing", e);
        }
    }

    @NotNull
    private InputParameters getInputs() {
        InputParameters input = new InputParameters();
        input.setSerialNumber((Integer) serialNumber.getValue());
        input.setInvoiceDate(convertToLocalDateViaInstant((Date) invoiceDate.getModel().getValue()));
        input.setServiceDate(convertToLocalDateViaInstant((Date) serviceDate.getModel().getValue()));
        input.setValue(new BigDecimal(value.getText().replace(",", ".")).setScale(2));
        return input;
    }

    private LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    private void createUIComponents() {
        invoiceDate = createDatePicker();
        serviceDate = createDatePicker();

        SpinnerNumberModel model = new SpinnerNumberModel(1, 1, 100, 1);
        serialNumber = new JSpinner(model);
        serialNumber.setPreferredSize(new Dimension(120, 25));

        value = new JFormattedTextField();
        value.setFormatterFactory(new DefaultFormatterFactory(
                new NumberFormatter(FormatUtils.getDecimalFormatter())));
        value.setPreferredSize(new Dimension(120, 25));
        value.setValue(0);
    }

    private JDatePickerImpl createDatePicker() {
        UtilDateModel model = new UtilDateModel();
        model.setSelected(true);

        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        JDatePickerImpl picker = new JDatePickerImpl(datePanel, DATE_LABEL_FORMATTER);
        picker.setPreferredSize(new Dimension(120, 25));

        return picker;
    }

    public JPanel getPanel() {
        return panel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(6, 2, new Insets(10, 10, 10, 10), -1, -1));
        invoiceDateLabel = new JLabel();
        invoiceDateLabel.setHorizontalAlignment(2);
        invoiceDateLabel.setHorizontalTextPosition(11);
        invoiceDateLabel.setText("Invoice date:");
        panel.add(invoiceDateLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        invoiceDate.setShowYearButtons(false);
        panel.add(invoiceDate, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        serviceDateLabel = new JLabel();
        serviceDateLabel.setHorizontalAlignment(2);
        serviceDateLabel.setHorizontalTextPosition(11);
        serviceDateLabel.setText("Service date:");
        panel.add(serviceDateLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel.add(serviceDate, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        valueLabel = new JLabel();
        valueLabel.setHorizontalAlignment(2);
        valueLabel.setHorizontalTextPosition(2);
        valueLabel.setText("Value:");
        panel.add(valueLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        serialNumber.setMaximumSize(new Dimension(80, 30));
        serialNumber.setMinimumSize(new Dimension(80, 30));
        serialNumber.setPreferredSize(new Dimension(80, 30));
        panel.add(serialNumber, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel.add(value, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        serialNumberLabel = new JLabel();
        serialNumberLabel.setHorizontalAlignment(2);
        serialNumberLabel.setHorizontalTextPosition(2);
        serialNumberLabel.setText("Invoice number:");
        panel.add(serialNumberLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        generate = new JButton();
        generate.setText("Generate");
        panel.add(generate, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        generateAndPrint = new JButton();
        generateAndPrint.setText("Generate and Print");
        panel.add(generateAndPrint, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        valueLabel.setLabelFor(value);
        serialNumberLabel.setLabelFor(serialNumber);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
